#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

#define MAX 100

// Stack for characters (operators)
typedef struct {
    char data[MAX];
    int top;
} CharStack;

// Stack for integers (evaluation)
typedef struct {
    int data[MAX];
    int top;
} IntStack;

void initCharStack(CharStack *s) { s->top = -1; }
int isCharEmpty(CharStack *s) { return s->top == -1; }
void pushChar(CharStack *s, char c) { if (s->top < MAX - 1) s->data[++s->top] = c; }
char popChar(CharStack *s) { return (isCharEmpty(s) ? '\0' : s->data[s->top--]); }
char peekChar(CharStack *s) { return (isCharEmpty(s) ? '\0' : s->data[s->top]); }

void initIntStack(IntStack *s) { s->top = -1; }
void pushInt(IntStack *s, int v) { if (s->top < MAX - 1) s->data[++s->top] = v; }
int popInt(IntStack *s) { return (s->top == -1 ? 0 : s->data[s->top--]); }

int precedence(char op) {
    switch (op) {
        case '^': return 3;
        case '*': case '/': return 2;
        case '+': case '-': return 1;
    }
    return 0;
}

int isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Convert infix to postfix (output stored in postfix[], return 0 on success)
int infixToPostfix(const char *infix, char *postfix) {
    CharStack stack;
    initCharStack(&stack);
    int i = 0, j = 0;
    while (infix[i]) {
        if (isspace(infix[i])) {
            i++;
        } else if (isdigit(infix[i])) {
            // Handle multi-digit numbers
            while (isdigit(infix[i])) {
                postfix[j++] = infix[i++];
            }
            postfix[j++] = ' '; // Separator
        } else if (infix[i] == '(') {
            pushChar(&stack, infix[i++]);
        } else if (infix[i] == ')') {
            while (!isCharEmpty(&stack) && peekChar(&stack) != '(') {
                postfix[j++] = popChar(&stack);
                postfix[j++] = ' ';
            }
            popChar(&stack);
            i++;
        } else if (isOperator(infix[i])) {
            char op = infix[i++];
            while (!isCharEmpty(&stack) &&
                   ((precedence(peekChar(&stack)) > precedence(op)) ||
                    (precedence(peekChar(&stack)) == precedence(op) && op != '^'))) {
                postfix[j++] = popChar(&stack);
                postfix[j++] = ' ';
            }
            pushChar(&stack, op);
        } else {
            return -1; // Invalid character
        }
    }
    while (!isCharEmpty(&stack)) {
        postfix[j++] = popChar(&stack);
        postfix[j++] = ' ';
    }
    postfix[j] = '\0';
    return 0;
}

// Evaluate postfix expression, return result
int evaluatePostfix(const char *postfix) {
    IntStack stack;
    initIntStack(&stack);
    int i = 0;
    while (postfix[i]) {
        if (isspace(postfix[i])) {
            i++;
        } else if (isdigit(postfix[i])) {
            int num = 0;
            while (isdigit(postfix[i])) {
                num = num * 10 + (postfix[i++] - '0');
            }
            pushInt(&stack, num);
        } else {
            int b = popInt(&stack);
            int a = popInt(&stack);
            int res = 0;
            switch (postfix[i++]) {
                case '+': res = a + b; break;
                case '-': res = a - b; break;
                case '*': res = a * b; break;
                case '/': res = (b != 0 ? a / b : 0); break;
                case '^': res = (int)pow(a, b); break;
                default: return 0; // Invalid operator
            }
            pushInt(&stack, res);
        }
    }
    return popInt(&stack);
}

int main() {
    char infix[MAX], postfix[2 * MAX];
    printf("Enter infix expression: ");
    if (!fgets(infix, MAX, stdin)) return 1;

    if (infixToPostfix(infix, postfix) != 0) {
        printf("Invalid expression\n");
        return 1;
    }

    printf("Postfix: %s\n", postfix);
    printf("Result: %d\n", evaluatePostfix(postfix));
    return 0;
}
